1. Give a detailed explanation of Delegates in C#.
	A delegate is a type that represents references to methods with a particular parameter list and return type. When you instantiate a delegate, you can associate its instance with any method with a compatible signature
and return type. You can invoke (or call) the method through the delegate instance. Delegates are used to pass methods as arguments to other methods. (ex call: delegate void SumDelegates(int x, int y);)

2. Explain Reflection in C#.
	Reflection provides objects that describe assemblies, modules, and types. You can use reflection to dynamically create an instance of a type, bind the type to an existing object, or get the type from an existing object
and invoke its methods or access its fields and properties. If you are using attributes in your code, reflection enables you to access them.

3. What are Properties in C#.
	A property is a member that provides a flexible mechanism to read, write, or compute the value of a private field. Properties can be used as if they are public data members, but they are actually special methods called accessors.
This enables data to be accessed easily and still helps promote the safety and flexibility of methods.

4. What is a static property?
	Use the static modifier to declare a static member, which belongs to the type itself rather than to a specific object. The static modifier can be used to declare static classes. In classes, interfaces, and structs, you may add
the static modifier to fields, methods, properties, operators, events, and constructors.

5. What are the advantages of properties in C#?
	Properties allow for us to use abstraction to hide the details of how the getting and setting works to and ensure that the getting and setting of variables follows the rules that we provide.

6. What is a virtual property?
	A virtual property is a keyword that can be overriden. In contrast to an abstract property, a virtual property must provide logic.

7. What is an abstract property?
	An abstract property is a property that is defined but provide no logic. Classes that contain at least one abstract method are called abstract classes and you cannot create a instance of an abstract class.

8. What is the difference between an interface and an abstract class?
	An interface is a template for classes to follow. Interfaces contain no logic in the functions, only the definition whereas an abstract class can have nonabstract functions. Interfaces also allow multiple inheritance 
in c#.

9. What is an indexer?
	Indexers allow instances of a class or struct to be indexed in a similar fashion to an array. The indexed values can be set or retrieved without explicitly specifying a type or instance member. Indexers resemble properties
except that their accessors take parameters.

10. What are multicast delegates?
	Multicast delegates are delegates that reference multiple functions. If you invoke multicast delegates, all functions that are referenced will be run.

11. How do you add a reference to a delegate?
	delegateName.Invoke(params);
	delegateName += func();

12. What are events?
	Events enable a class or object to notify other classes or objects when something of interest occurs. The class that sends the event is called the publisher and the class that receives the event are called subscribers.

13. Can you have static indexers?
No, you cannot.

14. Why should you use a delegate?
	Delegates allow methods to be passed as parameters. Delegates can invoke more than one method using multicast delegates. Delegates can be chained together so that multiple methods can be called on a single event. Methods
don't need to match the delegate signature exactly.

15. What are abstract indexers?
	Abstract indexers allow abstraction for classes with indexers. An abstract indexer cannot be instantiated. A class containing an abstract indexer is meant to be inherited. 

16. How do we achieve polymorphism in indexers?
	Indexers can be used in both Abstract class and interfaces. Indexers can also be inherited with the virtual keyword. If an indexer is overriden with the virtual keyword, we can achieve dynamic polymorphism as the data type
controls which indexer is called at runtime. If we method overload with indexers, we can achieve static polymorphism.

17. How do we achieve indexers in interface?
	Indexers in interfaces work similar to most interface definitions.
ex.
public interface IIndexInterface {
	int this[int i] {
		get;
		set;
	}
}

18. Can we overload an indexer?
	In order to overload an indexer, we would need two indexers in the same class with different parameters. These indexers would have the same name but would have different parameters which would fulfill overloading.

19. What are the differences between properties and indexers?
	Indexers are container like objects that contains information that is accessed through an index. A property is a member of a class that is accessed through its name. Properties can be static while indexers cannot.
Properties allow methods to be called as if they were public data members while indexers allow elements of an internal collection of an object to be accessed by using array notation on the object itself. The get method for Indexers
requires a parameter (the index) while properties do not have one.

20. How do we define a readonly/writeonly property?
	To define a readonly property, we need to create a property that only has a getter. To define a writeonly property, we need to create a property that only has a setter.

21. What are the two main ways we use the new keyword?
	The new keyword is used to create a new object on the heap. The new keyword is also changes which method is used during property overriding. If the new keyword is used in the second class instead of override, data of the parent
type that is created as an object of the child type will call on the parent function (instead of the child function like in method overriding).

22. What is the this pointer?
	The this pointer is a pointer that references the current object that it is contained within.

23. What is the differences between delegate and an event?
	An event declaration adds a layer of abstraction and protection on the delegate instance. This protection prevents clients of the delegate from resetting the delegate and only allows adding or removing targets. Events can also call
multiple delegates when needed (which mutlicast delegates can call multiple functions). Listening to events is optional which means that events work better if the code can complete all its work without calling any of its subscribers.
Events have a void return type where delegates can have a return type. Event listeners have a longer lifetime compared to delegates so they are better for when the source will be raising events over a long period of time.

24. What is the publisher/subscriber model?
	In the publisher/subscriber model, a publisher publishes a message and there are one or more subscribers who capture the published message.

25. What is the difference between var and dynamic?
	Var is static while dynamic is at run time. Once var is defined, var is the same type throughout the code while dynamic can change.

26. What is the difference between an array and a list?
	Arrays have a predefined size while lists size is dynamic.  An array is a collection of homogenous parts while a list consists of heterogeneous elements. Arrays are contious in memory while lists are random. Users don't need to
confine a track of next memory with arrays but they do have to track memory with a list. Lists contain more operations on it like sorting algorithms. Lists allow straightforward adding into while arrays require more effort to add.

27. What are the advantages of a Dictionary?
	Dictionaries represent a collection of key/value pairs. Dictionaries allow for fast lookup of data as the data is stored with a key and using the key will give us our value. Dictionary is implemented as a hash table so the 
look up is incredibly quick. Every key in a dictionary must be unique and cannot be null. Dictionary requires an equality implementation to determine whether keys are equal. For purposes of enumeration (ie a foreach loop), each
element is considered a KeyValuePair<TKey, TValue> which contains both the key and value of the entry.

28. What are the different types of collections?
	List, Dictionary, LinkedList, SortedList, Hashtable, Arraylist, queues, stacks

29. What are implicitly typed arrays?
	Implicitly typed arrays are arrays that do not contain any specific data type. When the user initializes the array with a data type, the compiler automatically converts these into arrays of that data type.
In other words, the data type is not given by the user but implied by the code which the compiler then assigns.

30. What are implicitly typed lists and how are they declared?
	Implicitly typed lists are lists that do not contain any specific data type but instead imply the type at its initialization which is then given to the list by the compiler.
ex. List<var> lst = new List<int>; // second type is required which makes them short lived

31. How do we access dictionary?
	We access the values in the dictionary by using the key.

32. What is an arraylist?
	ArrayList represents an ordered collection of an object that can be indexed individually. It is a basic alternative to an array as you can add and remove items from it dynamically and the arraylist resizes.

33. Can you store objects in lists?
	yes.
   ex. List<Employees> empList = new List<Employees>;
       empList.add(new Employee("Dave", "Smith", 10, 110000);

34. How do you loop through an implicitly typed list?
	A foreach loop will allow you to loop through an implicitly typed list. However, in order to access the properties of the type, you need to typecast.

35. What are generic classes, methods, delegates?
	The generic keyword is used to define a class, method, delegate that can take a generic type. In other words, a generic method that takes in two parameters can take in two integers, two chars, two strings, etc

36. What is the new constraint?
	The new constraint specifies that a type argument in a generic class declaration must have a public parameterless constructor. To use new(), the class cannot be abstract.
  ex. class ItemFactory<T> where T: new() {
	   public T GetNewItem() {
		return new T();
	   }
      }

37. How do you add multiple items to an arrayList?
	In order to add multiple items into an arrayList at the same time, you need to use the addRange() function.

38. What is the difference between capacity and count in arrayList?
	Count is the number of elements that are currently contained within the arrayList while the capacity is the maximum amount of elements that the arrayList can hold at the moment.

39. Why does capacity jump to 8 in our example? https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.capacity?view=netcore-3.1
	When the capacity of a list is exceeded, the capacity doubles. 

40. What is a hash table in C#?
	A hashtable is a data structure that implements an associative array abstract data type, a structure that can map keys to values. A hash table uses a hash function to compute an index, also called a hash code, into an array
of buckets or slots, from which the desired value can be found.

41. What is the difference between hash table and dictionary?
	A dictionary can only contain one of each key value while a hash table handles collisions through buckets. A dictionary is a generic collection while a hashtable is a nongeneric collection. In dictionaries, you must specify the 
type of key and value while there is no need to specify the type in a hash table. Data retrieval is faster in a dictionary because a hash table requires boxing and unboxing. Accessing a key that doesn't exist in a dictionary will give 
an error while trying to access a key that doesn't exist in a hash table will return null.

42. What is a stack? What are the commands for CRD?
	A stack is a data structure that models a LIFO (last in, first out) relationship. The CRD commands are as follows:
C- push
R- peek
D- pop

43. What is a queue? What are the commands for CRUD?
	A queue is a data structure that models a FIFO relationship. The CRD commands are as follows:
C- enqueue
R- peek
D- dequeue

44. How do you reverse a string using a stack?
	loop through the characters of the string adding them to the stack
	use a second loop to pop the chars from the stack, printing as you do
45. What are the different collection types?
	1. Index based: array, list
	2. K/V pair: hashtable, sorted list
	3. Prioritized collection: stacks, queues
	4. Specialized collection: string collections, hybrid collections
46. What are the six types of constraints of generics?
	1. where T: struct -> must be value type
	2. where T: class -> must be reference type
	3. where T: new() -> type must have parameterless constructor
	4. where T: <base class> -> must inherit from <base class>
	5. where T: <interface> -> must implement interface
	6. where T: U -> T must inherit from type U

47. What are the three main uses of the new keyword?
	1. Creating an object on the heap -> (ex int x = new int();)
	2. Method hiding -> (ex. public new void member() ...)
	3. The new generic constraint -> (ex. class<T> where T: new()...)

48. What is a singleton?
	A singleton class is a class that can have only one object (instance of a class) at a time. After first time, if we try to instantiate the Singleton class, the new variable also points to the first instance created.

49. What are anonymous functions?
	An anonymous function is an "inline" statement or expression that can be used wherever a delegate type is expected. You can use a lambda expression or an anonymous method to create an anonymous function.
(ex. MathDelegate delName = delegate(double x, double y) { return x + y; }
     delName(3, 5);		)

50. What is the lambda operator?
	A lambda operator is used for lambda functions. Lambda functions are type of anonymous functions that are used to make inline functions anywhere delegates can be used. 
(ex. (input-params) => expression)

51. What is a generic delegate?
	Generic delegates are inbuilt delegates taht are present in the System namespace. All these three delegates can be used with the method, anonymous method, and lambda expressions. There are three types of generic delegates: 
predicate delegate, func delegate, and action delegate. Predicate delegates are delegates that represent the method that defines a set of criteria and determines whether the specified object meets those criteria, returning true or false.
Func delegates have zero or more input parameters and one out parameter. Action delegate is similar to the func delegate except that the action delegate doesn't return a value.

52. How would you simplify an anonymous function?
	1. convert to a lambda functions
		delegate(string text) {return text.Length;} - - - > (string text) => {return text.Length}
	2. single expression, no braces
		(string text) => {return text.Length} - - - > (string text) => text.Length;
	3. Let the compiler infer the param type and lose the paranthesis
		(string text) => text.Length; - - - > text => text.Length

53. What is LINQ?
	Language Integrated Query (LINQ) is the name for a set of technologies based on the integration of query capabilities directly into C# language. LINQ is contained within the System namespace and follows SQL-like logic
for interaction with a database.

54. What is the difference between the order by and group by keywords?
	The order by keyword organizes by the results of the column (ex in the column fruits, it would be organized alphabetically). The group by clause groups the results up by the same value in the summary rows.

55. How do you select using LINQ with where?
 ex. var lowNums =
	from n in numbers
	select n;

56. What does the skip keyword do in LINQ?
	The Skip operator bypasses a specified number of contiguous rows from a sequence/table and returns the remaining table. It can skips rows from the top or can be for a certain criteria.

57. What does the take keyword do in LINQ?
	The Take operator returns a specified number of contiguous rows from the starting point of the database table. The Take operator takes in a parameter that specifies how many rows we want from the start position of the table.

58. How do you use Unions in LINQ?
	Assume we have two arrays -> numA and numB
(ex.	var uniqueNumbers = numA.Union(numB);)

59. What is the difference between the All and Any keyword?
	The All keyword returns true if ALL of the rows in the specified columns pass the conditon. The Any keyword returns true if at least one of the rows in the specified columns pass the condition.

60. What are some of the different types of Aggregate function in LINQ?
	Some of the more common aggregate functions are:
Count -> returns the count of the number of results
Sum -> sums up the col
min -> finds the smallest value of a row in the col
Max -> finds the largest value of a row in the col
Average -> finds the average value of a row

61. What does the Distinct keyword do?
	The distinct keyword only returns the distinct values contained within a row. In other words, the distinct keyword eliminates any repeats.

62. What does the Except keyword do?
	The except keyword returns the results of a table that are not contained within another table.
(ex. IEnumerable<int> onlyA = numA.Except(numB);)

63. What does First keyword do?
	The First keywords returns the first results within the row. FirstOrDefault either returns the first result or returns a default value if there is no result.

64. What is the thread pool?
	A thread pool is a software design pattern for achieving concurrency of execution within a computer program. Often also called replicated workers, a thread pool maintains multiple threads waiting for tasks to be allocated
for concurrent execution by the supervising program. A thread pool is a collection of threads.

65. What is a thread?
	A thread is a path followed when executing a program. Using threads, you can divide the program into two or more simultaneously running tasks.

66. What is locking?
	The lock statement is used to hold a thread that the lock is currently on. The code block is then executed and then releases the lock when it is finished. Typically, it is done by associating a synchronization object with 
each object that is susceptible to be shared between threads. Then, code manipulates the state of the object thereby locking the object. The reason for locking is to ensure that threads flow in a certain order.

67. How does join mean? 
	Join is how one thread waits for the completion of another thread. The main thread should execute a join waiting for the child thread to terminate. It forces the thread to wait until the other thread is done to execute.

68. What is ThreadStart?
	ThreadStart is a delegate that represents the method that executes on a thread.
(ex. ThreadStart threadDel = new ThreadStart(Work.DoWork);
     Thread newThread = new Thread(threadDelegate);
     newThread.Start();

69. What are the thread exceptions?
	Execptions in threads will typically occur when using locking. If a thread is trying to access a lock that has not yet been released, an exception will be thrown and needs to be handled by the code, typically using a try/catch
block.

70. What is the difference between lock and mutex?
	A lock only allows only one thread to enter the part that's locked and the lock is not shared with any other processes. A mutex is the same as a lock but it can be system wide (ie shared with other processes).

71. What is Mutex?
	Mutex (mutually exclusive object) is a programming object that allows multiple program threads to share the same resource, such as file access, but not simultaneously. Similar to a place that only has one cashier, the threads
must wait for the previous thread to release the key in order to access.
 
72. What does the WaitOne function do in the class mutex?
	The WaitOne function is the function that marks the point at which the threads will stop and not continuing until the Mutex key is released.

73. What is the Semaphore?
	A semaphore is a generalized mutex in the sense that we can specify the number of threads that can go into the code at a given time. Equivalent to a bank having three tellers at a given time, only three (or n) threads can use
the code at a given time.

74. What is the difference between mutex and SemaphoreSlim?
	A mutex provides mutual exclusion (ie one object or the other) where either producer or consumer can have the key and proceed with their work. At any point of time, only one thread can work with the entire buffer. A semaphore
is a generalized mutex. In lieu of single buffer, we can split into multiple buffers (ie 3 threads allowed in the section of code at a given time).

75. What is the difference between a thread and a process?
	Threads are typically used for small tasks  whereas processes are used for heavy tasks. A process can contain multiple threads as well. Threads within the same process contain the share the same address space but different 
processes do not have the same address. Threads run in shared memory space while processes run in seperate memory space. 

76. What is the thread life cycle?
	Request -> Thread Object -> resource allocated -> task executed -> garbage collection



